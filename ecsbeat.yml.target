################### Ecsbeat Configuration Example #########################

############################# Ecsbeat ######################################
ecsbeat:
  # Defines how often an event is fetched from ecs and sent to the output
  # Can use command level interval to overwrite it
  period: 300s

  # Customer ECS Setup
  customers:
    EMC:                         # customer name
      username: root             # mgmt username
      password: ChangeMe         # mgmt password
      tokenexpiry: 3500s         # token valid period. shall set this timer a little smaller than ECS token valid period
      reqtimeout: 30s            # request timeout
      blockduration: 600s        # how long a node shall stay in blacklist if request to this node times out. 0s for not blocking
      vdcs:
        VDC1:                    # VDC name, could be anything as long as each VDC has different name
           nodes:
             - host: 10.1.83.51  # host to query. Add mgmt IPs of all nodes in this VDC below, or site LB host (and port if not 4443, set blockduration to 0s if single LB host is used)
             - host: 10.1.83.52  # host
        VDC2:                    # VDC name
           nodes:
             - host: 10.1.83.53  # host
             - host: 10.1.83.54  # host
      cfgrefreshinterval: 3600s  # How frequent to update VDC and node names. Generally, default value is good enough because these info is almost never changed

  # Add additional customer here
  # DELL:
  #   username: root
  #   password: ChangeMe
  #   tokenexpiry: 3500s
  #   reqtimeout: 30s
  #   blockduration: 600s
  #   vdcs:
  #     EAST:
  #        nodes:
  #          - host: 10.1.83.51
  #          - host: 10.1.83.52
  #     WEST:
  #        nodes:
  #          - host: 10.1.83.53
  #          - host: 10.1.83.54
  #   cfgrefreshinterval: 3600s

#================================ Ecs Cluster  =====================================
#ecsconfig:
  commands: ## DON'T change commands section except for interval ##
    - uri: /vdc/events.json
      type: auditevent
      level: vdc
      interval: 60s # must be multiple of 60s
    - uri: /vdc/alerts.json
      type: alert
      level: vdc
      interval: 60s # must be multiple of 60s
    - uri: /vdc/alerts/latest.json
      type: latestalert
      level: vdc
      interval: 60s
    - uri: /dashboard/zones/localzone?dataType=current
      type: localzone
      level: vdc
      interval: 0
    - uri: /dashboard/zones/localzone/nodes?dataType=current
      type: nodes
      level: vdc
      interval: 0
    - uri: /dashboard/zones/localzone/replicationgroups?dataType=current
      type: replicationgroups
      level: vdc
      interval: 0
    - uri: /dashboard/zones/localzone/storagepools?dataType=current
      type: storagepools
      level: vdc
      interval: 0
    - uri: /dashboard/nodes/%s/disks?dataType=current
      type: disks
      level: node
      interval: 0
    - uri: /dashboard/nodes/%s/processes?dataType=current
      type: processes
      level: node
      interval: 0
    - uri: /object/capacity.json
      type: capacity
      level: system
      interval: 0
    - uri: /object/billing/namespace/info.json?include_bucket_detail=false
      type: nsbilling
      level: system
      interval: 600s
    - uri: /object/billing/namespace/sample.json?include_bucket_detail=false
      type: nsbillingsample
      level: system
      interval: 600s # must be multiple of 300s
    - uri: dummy
      type: dtinfo
      level: dtinfo # dtinfo is specially handled
      interval: 600s

#================================ General =====================================

# The name of the shipper that publishes the network data. It can be used to group
# all the transactions sent by a single shipper in the web interface.
#name:

# The tags of the shipper are included in their own field with each
# transaction published.
#tags: ["service-X", "web-tier"]

# Optional fields that you can specify to add additional information to the
# output.
#fields:
#  env: staging

#================================ Outputs =====================================

# Configure what outputs to use when sending the data collected by the beat.
# Multiple outputs may be used.

#-------------------------- Elasticsearch output ------------------------------
output.elasticsearch:
  # Array of hosts to connect to.
  hosts: ["localhost:9200"]

  # Optional protocol and basic auth credentials.
  #protocol: "https"
  #username: "elastic"
  #password: "changeme"

#----------------------------- Logstash output --------------------------------
#output.logstash:
  # The Logstash hosts
  #hosts: ["localhost:5044"]

  # Optional SSL. By default is off.
  # List of root certificates for HTTPS server verifications
  #ssl.certificate_authorities: ["/etc/pki/root/ca.pem"]

  # Certificate for SSL client authentication
  #ssl.certificate: "/etc/pki/client/cert.pem"

  # Client Certificate Key
  #ssl.key: "/etc/pki/client/cert.key"

#================================ Logging =====================================

# Sets log level. The default log level is info.
# Available log levels are: critical, error, warning, info, debug
#logging.level: debug

# At debug level, you can selectively enable logging only for some components.
# To enable all selectors use ["*"]. Examples of other selectors are "beat",
# "publish", "service".
#logging.selectors: ["*"]
